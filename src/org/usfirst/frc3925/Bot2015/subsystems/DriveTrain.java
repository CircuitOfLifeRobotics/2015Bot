// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3925.Bot2015.subsystems;

import org.usfirst.frc3925.Bot2015.RobotMap;
import org.usfirst.frc3925.Bot2015.commands.DefaultDrive;
import org.usfirst.frc3925.Bot2015.util.LoggedPIDSource;
import org.usfirst.frc3925.Bot2015.util.SplitPIDOutput;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {
    SpeedController rightRear = RobotMap.driveTrainrightRear;
    SpeedController rightFront = RobotMap.driveTrainrightFront;
    SpeedController leftFront = RobotMap.driveTrainleftFront;
    DoubleSolenoid driveShiftSolenoid = RobotMap.driveTraindriveShiftSolenoid;
    Encoder leftDriveEncoder = RobotMap.driveTrainleftDriveEncoder;
    Encoder rightDriveEncoder = RobotMap.driveTrainrightDriveEncoder;
    SpeedController leftRear = RobotMap.driveTrainleftRear;

    PIDController leftDrivePIDController;
    PIDController rightDrivePIDController;
    
    PIDController leftDrivePIDControllerAutonomous;
    PIDController rightDrivePIDControllerAutonomous;
    
    Gear currentGear;

    public void initDefaultCommand() {
    	setDefaultCommand(new DefaultDrive());
    	
    	leftDrivePIDController = new PIDController(.001, 0.0001, 0, new LoggedPIDSource("left encoder", leftDriveEncoder), new SplitPIDOutput(leftFront, leftRear));
    	leftDrivePIDController.setAbsoluteTolerance(.2d);
    	leftDrivePIDController.setOutputRange(-1, 1);
    	leftDrivePIDController.setContinuous(false);
    	leftDrivePIDController.enable();

    	rightDrivePIDController = new PIDController(.001, 0.0001, 0, new LoggedPIDSource("right encoder", rightDriveEncoder), new SplitPIDOutput(rightFront, rightRear));
    	rightDrivePIDController.setAbsoluteTolerance(.2d);
    	rightDrivePIDController.setOutputRange(-1, 1);
    	rightDrivePIDController.setContinuous(false);
    	rightDrivePIDController.enable();
    	
//    	leftDrivePIDControllerAutonomous = new PIDController(.001, 0, 0, leftDriveEncoder, new SplitPIDOutput(leftFront, leftRear));
//    	leftDrivePIDControllerAutonomous.setAbsoluteTolerance(.2d);
//    	leftDrivePIDControllerAutonomous.setOutputRange(-1, 1);
//    	leftDrivePIDControllerAutonomous.setContinuous(false);
//    	leftDrivePIDControllerAutonomous.disable();
//
//    	rightDrivePIDControllerAutonomous = new PIDController(.001, 0, 0, rightDriveEncoder, new SplitPIDOutput(rightFront, rightRear));
//    	rightDrivePIDControllerAutonomous.setAbsoluteTolerance(.2d);
//    	rightDrivePIDControllerAutonomous.setOutputRange(-1, 1);
//    	rightDrivePIDControllerAutonomous.setContinuous(false);
//    	rightDrivePIDControllerAutonomous.disable();
    	
    	LiveWindow.addActuator("DriveTrain", "LeftPIDController", leftDrivePIDController);
    	LiveWindow.addActuator("DriveTrain", "RightPIDController", rightDrivePIDController);
    	
//    	LiveWindow.addActuator("AutonomousDriveTrain", "LeftPIDControllerAutonomous", leftDrivePIDControllerAutonomous);
//    	LiveWindow.addActuator("AutonomousDriveTrain", "RightPIDControllerAutonomous", rightDrivePIDControllerAutonomous);
    }
    
    public void setGear(Gear g) {
    	//TODO: change pid logic on shift
    	if (g != currentGear) {
    		if (g == Gear.HIGH) {
    			driveShiftSolenoid.set(DoubleSolenoid.Value.kForward);
    		} else { // LOW
    			driveShiftSolenoid.set(DoubleSolenoid.Value.kReverse);
    		}
    		SmartDashboard.putBoolean("HighGear",g == Gear.HIGH);
    		currentGear = g;
    	}
    }
    
    public Gear getGear() {
    	return currentGear;
    }
    
    /**
     * sets motor speeds in in/s.
     * 
     * @param left speed of left side in in/s
     * @param right speed of right side in in/s
     */
    public void setMotorSpeeds(double left, double right) {
    	// with 4 inch diameter wheels, 0.09817477 inches / tick or 0.009375 revolutions
    	// math: ((4*pi)/128)* 1 / 1.2 /128
    	
    	// new: 0.013089969 in : tick
    	leftDrivePIDController.setSetpoint(left);
    	rightDrivePIDController.setSetpoint(-right);
    }
    
//    public void setMotorDistance(double left, double right) {
//    	leftDrivePIDControllerAutonomous.setSetpoint(0);
//    	rightDrivePIDControllerAutonomous.setSetpoint(0);
//    }
    
    public static enum Gear {
    	HIGH, LOW
    }

	public void enable() {
		leftDrivePIDController.enable();
		rightDrivePIDController.enable();
	}
	
}

