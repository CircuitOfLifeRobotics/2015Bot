// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3925.Bot2015.subsystems;

import org.usfirst.frc3925.Bot2015.RobotMap;
import org.usfirst.frc3925.Bot2015.commands.*;
import org.usfirst.frc3925.Bot2015.util.SplitPIDOutput;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {
    SpeedController rightRear = RobotMap.driveTrainrightRear;
    SpeedController rightFront = RobotMap.driveTrainrightFront;
    SpeedController leftFront = RobotMap.driveTrainleftFront;
    DoubleSolenoid driveShiftSolenoid = RobotMap.driveTraindriveShiftSolenoid;
    Encoder leftDriveEncoder = RobotMap.driveTrainleftDriveEncoder;
    Encoder rightDriveEncoder = RobotMap.driveTrainrightDriveEncoder;
    SpeedController leftRear = RobotMap.driveTrainleftRear;

    PIDController leftDrivePIDController;
    PIDController rightDrivePIDController;
    
    Gear currentGear;

    public void initDefaultCommand() {
    	setDefaultCommand(new DefaultDrive());
    	
    	leftDrivePIDController = new PIDController(1, 0, 0, leftDriveEncoder, new SplitPIDOutput(leftFront, leftRear));
    	leftDrivePIDController.setAbsoluteTolerance(.2d);
    	leftDrivePIDController.setOutputRange(-1, 1);
    	leftDrivePIDController.setInputRange(-60, 60);
    	leftDrivePIDController.setContinuous(false);
    	leftDrivePIDController.enable();

    	rightDrivePIDController = new PIDController(1, 0, 0, rightDriveEncoder, new SplitPIDOutput(rightFront, rightRear));
    	rightDrivePIDController.setAbsoluteTolerance(.2d);
    	rightDrivePIDController.setOutputRange(-1, 1);
    	rightDrivePIDController.setInputRange(-6/*distance per rev*/ * 10 /*revolutions*/, 6/*distance per rev*/ * 10 /*revolutions*/);
    	rightDrivePIDController.setContinuous(false);
    	rightDrivePIDController.enable();
    	
    	LiveWindow.addActuator("DriveTrain", "LeftPIDController", leftDrivePIDController);
    	LiveWindow.addActuator("DriveTrain", "RightPIDController", rightDrivePIDController);
    }
    
    public void setGear(Gear g) {
    	//TODO: change pid logic on shift
    	if (g != currentGear) {
    		if (g == Gear.HIGH) {
    			driveShiftSolenoid.set(DoubleSolenoid.Value.kForward);
    		} else { // LOW
    			driveShiftSolenoid.set(DoubleSolenoid.Value.kReverse);
    		}
    		SmartDashboard.putBoolean("HighGear",g == Gear.HIGH);
    		currentGear = g;
    	}
    }
    
    public void setMotorSpeeds(double left, double right) {
    	leftDrivePIDController.setSetpoint(left * 60);
    	rightDrivePIDController.setSetpoint(right * 60);
    }
    
    public static enum Gear {
    	HIGH, LOW
    }

	public void enable() {
		leftDrivePIDController.enable();
		rightDrivePIDController.enable();
	}
}

